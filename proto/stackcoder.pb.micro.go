// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/stackcoder.proto

package stackcoder

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Stackcoder service

func NewStackcoderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Stackcoder service

type StackcoderService interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Hints(ctx context.Context, in *HintsRequest, opts ...client.CallOption) (*Response, error)
	Tutorials(ctx context.Context, in *TutorialsRequest, opts ...client.CallOption) (*Response, error)
	Users(ctx context.Context, in *UsersRequest, opts ...client.CallOption) (*Response, error)
}

type stackcoderService struct {
	c    client.Client
	name string
}

func NewStackcoderService(name string, c client.Client) StackcoderService {
	return &stackcoderService{
		c:    c,
		name: name,
	}
}

func (c *stackcoderService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Stackcoder.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackcoderService) Hints(ctx context.Context, in *HintsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Stackcoder.Hints", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackcoderService) Tutorials(ctx context.Context, in *TutorialsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Stackcoder.Tutorials", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackcoderService) Users(ctx context.Context, in *UsersRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Stackcoder.Users", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Stackcoder service

type StackcoderHandler interface {
	Call(context.Context, *Request, *Response) error
	Hints(context.Context, *HintsRequest, *Response) error
	Tutorials(context.Context, *TutorialsRequest, *Response) error
	Users(context.Context, *UsersRequest, *Response) error
}

func RegisterStackcoderHandler(s server.Server, hdlr StackcoderHandler, opts ...server.HandlerOption) error {
	type stackcoder interface {
		Call(ctx context.Context, in *Request, out *Response) error
		Hints(ctx context.Context, in *HintsRequest, out *Response) error
		Tutorials(ctx context.Context, in *TutorialsRequest, out *Response) error
		Users(ctx context.Context, in *UsersRequest, out *Response) error
	}
	type Stackcoder struct {
		stackcoder
	}
	h := &stackcoderHandler{hdlr}
	return s.Handle(s.NewHandler(&Stackcoder{h}, opts...))
}

type stackcoderHandler struct {
	StackcoderHandler
}

func (h *stackcoderHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.StackcoderHandler.Call(ctx, in, out)
}

func (h *stackcoderHandler) Hints(ctx context.Context, in *HintsRequest, out *Response) error {
	return h.StackcoderHandler.Hints(ctx, in, out)
}

func (h *stackcoderHandler) Tutorials(ctx context.Context, in *TutorialsRequest, out *Response) error {
	return h.StackcoderHandler.Tutorials(ctx, in, out)
}

func (h *stackcoderHandler) Users(ctx context.Context, in *UsersRequest, out *Response) error {
	return h.StackcoderHandler.Users(ctx, in, out)
}
